{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"HHG",
				"HHG_tmp"
			],
			[
				"output",
				"output_electric_field"
			],
			[
				"A",
				"A_w_R"
			],
			[
				"init",
				"intial_A"
			],
			[
				"count",
				"count_underscore"
			],
			[
				"pending",
				"pending_string_len"
			],
			[
				"pen",
				"pending_string_len"
			],
			[
				"original_n_z_de",
				"original_n_z_description"
			],
			[
				"initial",
				"initial_position"
			],
			[
				"iti",
				"initial_step"
			],
			[
				"accer",
				"accelerationToHHSource"
			],
			[
				"set",
				"set_cb_ptr"
			],
			[
				"gas",
				"gas_pressure_profile"
			],
			[
				"atom",
				"atom_density"
			],
			[
				"input",
				"input_description_char"
			],
			[
				"variab",
				"variable_value_str"
			],
			[
				"inp",
				"input_description_char"
			],
			[
				"vari",
				"variable_value_str"
			],
			[
				"initi",
				"initial_step"
			],
			[
				"path_HHG_",
				"path_HHG_w"
			],
			[
				"path_ele",
				"path_electron_density_set"
			],
			[
				"path_e",
				"path_electron_density_description"
			],
			[
				"laser",
				"laser_driving"
			],
			[
				"sim",
				"sim_no"
			],
			[
				"prop",
				"propagation_step"
			],
			[
				"propagation",
				"propagation_step"
			],
			[
				"read_",
				"read_in_laser_pulse"
			],
			[
				"read",
				"read_in_laser_pulse"
			],
			[
				"_inlet",
				"_inlet_2"
			],
			[
				"_A",
				"_A_w_r"
			],
			[
				"Type",
				"TypeHasToString"
			],
			[
				"Has",
				"HasUsedMemoryMethod"
			],
			[
				"lamda",
				"lamda_min_HHG"
			],
			[
				"swap",
				"_testing_swap_rowsAndCols"
			],
			[
				"N_",
				"N_rows_w"
			],
			[
				"phy",
				"physics_"
			],
			[
				"phys",
				"physics"
			],
			[
				"grid",
				"grid_tw"
			],
			[
				"config",
				"config_settings"
			],
			[
				"w_active",
				"w_active_tmp"
			],
			[
				"w_",
				"w_active_min_index_HHG"
			],
			[
				"w_ac",
				"w_active_min_index_HHG"
			],
			[
				"w_a",
				"w_active_HHG"
			],
			[
				"this",
				"this_node"
			],
			[
				"ra",
				"rank"
			],
			[
				"hh",
				"hhgp"
			],
			[
				"Get",
				"GetSource"
			],
			[
				"con",
				"config_settings"
			],
			[
				"k",
				"k"
			],
			[
				"a",
				"atom_density"
			],
			[
				"A_w_r",
				"A_w_r_tmp"
			],
			[
				"k_",
				"k_excluded"
			],
			[
				"ph",
				"physics"
			],
			[
				"test",
				"test_f2"
			],
			[
				"N",
				"N_col_"
			],
			[
				"min",
				"minCoeff"
			],
			[
				"max",
				"maxCoeff"
			],
			[
				"tes",
				"test_f1"
			],
			[
				"refractive",
				"refractiveIndex"
			],
			[
				"Co",
				"Config_Settings"
			],
			[
				"maths",
				"maths_textbook"
			],
			[
				"A_w",
				"A_w_r_"
			],
			[
				"tra",
				"transitionLength"
			],
			[
				"inl",
				"inlet_2"
			],
			[
				"_in",
				"_inlet_2"
			],
			[
				"atol",
				"atol_original"
			],
			[
				"rtol",
				"rtol_original"
			],
			[
				"power",
				"power_index"
			],
			[
				"35muCore",
				"35muCore22-4muWaist"
			],
			[
				"rad",
				"radially_integrated"
			],
			[
				"radially",
				"radially_integrated"
			],
			[
				"Ph",
				"Pharos_smallerCoreFibre"
			],
			[
				"ourl",
				"ourLaser_35fs"
			],
			[
				"ourL",
				"ourLaser_50fs"
			],
			[
				"show",
				"show_labels"
			],
			[
				"mult",
				"multi_wavelength"
			],
			[
				"_w",
				"_w_active"
			],
			[
				"_c",
				"_combined_lamda"
			],
			[
				"conf",
				"config_XNLO"
			],
			[
				"_head",
				"_header_w_active"
			],
			[
				"axis",
				"axis_titles"
			],
			[
				"at",
				"atoms_per_worker"
			],
			[
				"_I_p",
				"_I_peak"
			],
			[
				"electron",
				"_electronDensity"
			],
			[
				"radiall",
				"radially_weighted"
			],
			[
				"_header",
				"_header_ionisation"
			],
			[
				"ion",
				"ionisation_rate_w_active_r"
			],
			[
				"_combin",
				"_combined_A_t_r"
			],
			[
				"radial",
				"radial_grid"
			],
			[
				"_inpu",
				"_inputs_namedTuple"
			],
			[
				"Plo",
				"Plot_spec"
			],
			[
				"UPP",
				"UPPE_spec"
			],
			[
				"_Z",
				"_Z_min"
			],
			[
				"_set_A_t_r",
				"_set_A_t_r_padded"
			],
			[
				"_set_A_t_",
				"_set_A_t_m_padded"
			],
			[
				"A_w_m",
				"A_w_m_padded"
			],
			[
				"_r",
				"_radial_grid"
			],
			[
				"_radi",
				"_radial_grid"
			],
			[
				"_rad",
				"_radial_grid"
			],
			[
				"_ra",
				"_radial_grid"
			],
			[
				"_com",
				"_combined_A_t_r"
			],
			[
				"_ha",
				"_Hankel_transform"
			],
			[
				"han",
				"hankel_transform"
			],
			[
				"_N",
				"_N_modes"
			],
			[
				"ha",
				"hankel_transform"
			],
			[
				"header",
				"_header_A_w_R"
			],
			[
				"_h",
				"_header_A_w_R"
			],
			[
				"__ra",
				"__radial_grid__"
			],
			[
				"__",
				"__N_modes__"
			],
			[
				"A_t_c",
				"A_t_slice_interp"
			],
			[
				"interp",
				"interp_length"
			],
			[
				"head",
				"header_size"
			],
			[
				"las",
				"laser_pulse_file"
			],
			[
				"XNLO_d",
				"XNLO_double_size"
			],
			[
				"XNLO_b",
				"XNLO_binary_format_subversion"
			],
			[
				"XNLO_bin",
				"XNLO_binary_format_version"
			],
			[
				"path_w",
				"path_w_active"
			],
			[
				"b",
				"boundary_tmp_2"
			],
			[
				"boundary",
				"boundary_tmp_2"
			],
			[
				"boun",
				"boundary_tmp"
			],
			[
				"Arra",
				"ArrayXcd"
			],
			[
				"P",
				"P_NL_t"
			],
			[
				"densi",
				"density_neutral_atoms"
			],
			[
				"n",
				"n_active"
			],
			[
				"w_act",
				"w_active_min_index"
			],
			[
				"__A_w_",
				"__A_w_R__"
			],
			[
				"__A",
				"__header_A_w_R__"
			],
			[
				"__h",
				"__Hankel_transform__"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/home/sam/Project/XNLO/src/atom/Schrodinger_atom_1D.cpp",
			"settings":
			{
				"buffer_size": 10198,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "//\n//  capillary_fibre.hpp\n//\n//  Originally created by Patrick Anderson.\n//  Modified by Samuel Senior on 10/03/2017.\n//  \"capillary_fibre\" describes the dimensions and dispersion properties of a dielectric capillary\n//  type fibre.\n//\n\n#include \"capillary_fibre.hpp\"\n#include \"../grid/grid_rkr.hpp\"\n#include \"../grid/grid_tw.hpp\"\n#include \"../physics/physics_textbook.hpp\"\n#include \"../maths/maths_textbook.hpp\"\n#include \"../../Eigen/Dense\"\n\nusing namespace Eigen;\n\n//------------------------------------------------------------------------------------------------//\n//  Class implementation\n//------------------------------------------------------------------------------------------------//\n/*! Constructor */\ncapillary_fibre::capillary_fibre(double Z_, grid_rkr& rkr_, grid_tw& tw_, physics_textbook& physics_,\n                                 maths_textbook& maths_) :\n                                 Z(Z_){\n\n    R = rkr_.R;\n    n_glass = 1.47738;\n\n    // Complex modal propagation constants (Marcatili and Schmeltzer, 1964)\n    ArrayXd k_w_active = tw_.w_active / physics_.c;\n    gamma = ArrayXXcd::Zero(tw_.n_active, rkr_.n_m);\n    for (int ii = 0; ii < rkr_.n_m; ii++) {\n        // Dispersion\n        gamma.col(ii).real() = k_w_active * (1.0 - (0.5 * ((maths_.J0_zeros(ii) * physics_.c /\n                                                    (R * tw_.w_active)).pow(2.0))));\n        // Loss\n        gamma.col(ii).imag() = (-1.0 / R) * ((maths_.J0_zeros(ii) * physics_.c) /\n                                             (R * tw_.w_active)).pow(2.0) *\n                               ((1.0 + std::pow(n_glass, 2.0)) /\n                                (2.0 * std::sqrt(std::pow(n_glass, 2.0) - 1.0)));\n    }\n}\n",
			"file": "/home/sam/Project/XNLO/src/UPPE/_capillary_fibre.cpp",
			"file_size": 1712,
			"file_write_time": 131999053133879489,
			"settings":
			{
				"buffer_size": 1712,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/sam/Project/XNLO/src/UPPE/main.cpp",
			"settings":
			{
				"buffer_size": 22267,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/sam/Project/XNLO/src/laser_pulse/laser_pulse.cpp",
			"settings":
			{
				"buffer_size": 20507,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/sam/Project/XNLO/src/XNLO/XNLO.hpp",
			"settings":
			{
				"buffer_size": 306,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/sam/Project/XNLO/src/laser_pulse/laser_pulse.hpp",
			"settings":
			{
				"buffer_size": 3618,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/sam/Project/XNLO/src/XNLO/main.cpp",
			"settings":
			{
				"buffer_size": 7989,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "//\n//  laser_pulse.hpp\n//\n//  Originally created by Patrick Anderson.\n//  Modified by Samuel Senior on 10/03/2017.\n//  \"laser_pulse\" contains the active spectral amplitudes and governs their propagation over\n//  longitudinal step dz.\n//\n\n#include <mkl.h>\n#include <iostream>\n\n#include \"../../Eigen/Dense\"\n\n#include \"config_settings.hpp\"\n#include \"laser_pulse.hpp\"\n\n#include \"../capillary/capillary_fibre.hpp\"\n#include \"../DHT/DHT.hpp\"\n#include \"../gas/keldysh_gas.hpp\"\n#include \"../grid/grid_tw.hpp\"\n#include \"../grid/grid_rkr.hpp\"\n#include \"../IO/IO.hpp\"\n#include \"../physics/physics_textbook.hpp\"\n#include \"../maths/maths_textbook.hpp\"\n\nusing namespace Eigen;\n\n//------------------------------------------------------------------------------------------------//\n//  Class implementation\n//------------------------------------------------------------------------------------------------//\n/*!\n    Constructor\n*/\nlaser_pulse::laser_pulse(double p_av_, double rep_, double fwhm_, double l_0_, double ceo_,\n                         double waist_, grid_tw& tw_, grid_rkr& rkr_, DFTI_DESCRIPTOR_HANDLE& ft_,\n                         DHT& ht_, maths_textbook& maths_,\n                         Config_Settings config,\n                         int read_in_laser_pulse, double initial_position)\n                        :\n                         p_av(p_av_),\n                         rep(rep_),\n                         fwhm(fwhm_),\n                         l_0(l_0_),\n                         ceo(ceo_),\n                         waist(waist_),\n                         tw(tw_),\n                         rkr(rkr_),\n                         ft(ft_),\n                         ht(ht_),\n                         maths(maths_),\n                         config(config),\n                         read_in_laser_pulse(read_in_laser_pulse),\n                         initial_position(initial_position) {\n\n    if (read_in_laser_pulse == 0) {\n\n        // Temporal\n        p_pk = 0.94 * ((p_av / rep) / fwhm);\n        E_pk = std::sqrt((4.0 * p_pk) / (physics.c * physics.eps_0 * maths.pi *\n                                              (std::pow(waist, 2))));\n        ArrayXd env_t = (-2.77 * (tw.t / fwhm).pow(2)).exp();\n        ArrayXd carr_t = (((2.0 * maths.pi * physics.c / l_0) * tw.t) + ceo).cos();\n\n        // Spatial\n        ArrayXd env_r = (-(rkr.r / waist).pow(2)).exp();\n\n        // Spatio-temporal\n        ArrayXXd E_t_r = (E_pk * env_t * carr_t).matrix() * env_r.matrix().transpose();\n\n        // Apply forward spectral transform\n        ArrayXXcd temp_1 = E_t_r.cast<std::complex<double> >();\n        for (int ii = 0; ii < rkr.n_r; ii++)\n            DftiComputeForward(ft, temp_1.col(ii).data());\n        ArrayXXcd temp_2 = temp_1.block(tw.w_active_min_index, 0, tw.n_active, rkr.n_r);\n        for (int ii = 0; ii < tw.n_active; ii++)\n            temp_2.row(ii) = ht.forward(temp_2.row(ii));\n        A_w_active = temp_2.block(0, 0, tw.n_active, rkr.n_m);\n\n        electron_density = ArrayXXd::Zero(tw.n_t, rkr.n_r);//tw.n_active, rkr.n_r);\n\n        z_position = 0.0;\n    } else if (read_in_laser_pulse == 1) {\n\nstd::cout << \"Reading in initial laser pulse from file...\" << std::endl;\n        // Read in spectral amplitudes from file\n        IO laser_pulse_file;\n        laser_pulse_file.read_header(config.path_A_w_R_initial(), false);\n        ArrayXXd A_w_R = laser_pulse_file.read_double(config.path_A_w_R_initial());\n        laser_pulse_file.read_header(config.path_A_w_I_initial(), false);\n        ArrayXXd A_w_I = laser_pulse_file.read_double(config.path_A_w_I_initial());\n        int N_cols = laser_pulse_file.N_col_;\n        int N_rows = laser_pulse_file.N_row_;\nstd::cout << \"N_cols: \" << N_cols << \", N_rows: \" << N_rows << std::endl;\n        // Combine the two real array that represent the real and complex parts and make a complex array from them\n        A_w_active = (A_w_R.cast<std::complex<double> >() + (std::complex<double>(0.0, 1.0) * A_w_I));\n\n        electron_density = ArrayXXd::Zero(tw.n_t, rkr.n_r);//tw.n_active, rkr.n_r);\n        z_position = initial_position;\nstd::cout << \"A_w_active.rows(): \" << A_w_active.rows() << \", A_w_active.cols(): \" << A_w_active.cols() << std::endl;\n    }\n }\n\n\n//------------------------------------------------------------------------------------------------//\n/*!\n    Propagate sprectral amplitudes A_w_active over the longitudinal step dz_, based on A. Couairon,\n    et al., Eur. Phys. J. Special Topics, 199, 5 (2011)\n*/\nvoid laser_pulse::propagate(double dz_, capillary_fibre& capillary_, keldysh_gas& gas_) {\n\n    // Call ODE solver\n    // (custom, adaptive)\n    //static\n    double h = dz_ / 5;    // Initial guess\n    //static\n    double tol = 1e-5;     // Relative error tolerance\n\n    //static\n    int i = 0;\n    //static\n    int j = 0;\n    //static\n    double z = 0;\n    //static\n    bool last_step = false;\n    while (last_step == false) {\n        if (z + (1.1 * h) > dz_) {\n            h = dz_ - z;\n            last_step = true;\n        }\n        RK_F_45(h, capillary_, gas_);\n        if (e <= tol * Y_5.matrix().norm()) {\n            // Tolerence met\n            A_w_active = Y_4;\n            h *= 1.25;\n            z += h;\n\n        } else {\n            // Tolerence not met\n            h *= 0.5;\n            last_step = false;\n        }\n    }\n    // Backward spectral transform\n    //static\n    ArrayXXcd temp_2 = ArrayXXcd::Zero(tw.n_active, rkr.n_r);\n    temp_2.block(0, 0, tw.n_active, rkr.n_m) = A_w_active;\n    for (int ii = 0; ii < tw.n_active; ii++)\n        temp_2.row(ii) = ht.backward(temp_2.row(ii));\n    //static\n    ArrayXXcd temp_3 = ArrayXXcd::Zero(tw.n_t, rkr.n_r);\n    temp_3.block(tw.w_active_min_index , 0, tw.n_active, rkr.n_r) = temp_2;\n    temp_3.block(tw.n_t - tw.n_active - tw.w_active_min_index + 1, 0,\n                 tw.n_active, rkr.n_r) = temp_2.conjugate().colwise().reverse();\n    //static\n    ArrayXd temp_4 = ArrayXd::Zero(tw.n_t);\n    for (int ii = 0; ii < rkr.n_r; ii++)\n        DftiComputeBackward(ft, temp_3.col(ii).data());\n    for (int ii = 0; ii < rkr.n_r; ii++) {\n        temp_4 = gas_.electron_density(gas_.ionization_rate(temp_3.col(ii).real()), z_position);\n        electron_density.col(ii) = temp_4;//.segment(tw.w_active_min_index, tw.n_active);\n    }\n    z_position += z;\n\n    // Apply additional shift\n    for (int ii = 0; ii < rkr.n_m; ii++) {\n        A_w_active.col(ii) *= (std::complex<double>(0, -dz_) * (capillary_.gamma.col(ii) -\n                               (tw.w_active / physics.c).cast<std::complex<double> >())).exp();\n    }\n}\n\n//------------------------------------------------------------------------------------------------//\n/*!\n    Runge-Kutta-Fehlberg 45 ODE solver\n*/\nvoid laser_pulse::RK_F_45(double h_, capillary_fibre& capillary_, keldysh_gas& gas_) {\n\n    // Need to check the statics here are correct and the k_n's are still\n    // being assigned correctly etc\n    // But if not then declare them static\n    // and then intialise them on a seperate line\n    //static\n    ArrayXXcd k_1 = h_ * RHS_UPPE(0, A_w_active, capillary_, gas_);\n    //static\n    ArrayXXcd k_2 = h_ * RHS_UPPE(0 + (h_/4), A_w_active + (k_1/4), capillary_, gas_);\n    //static\n    ArrayXXcd k_3 = h_ * RHS_UPPE(0 + (3*h_/8), A_w_active + (3*k_1/32) + (9*k_2/32), capillary_, gas_);\n    //static\n    ArrayXXcd k_4 = h_ * RHS_UPPE(0 + (12*h_/13), A_w_active + (1932*k_1/2197) - (7200*k_2/2197) + (7296*k_3/2197), capillary_, gas_);\n    //static\n    ArrayXXcd k_5 = h_ * RHS_UPPE(0 + h_, A_w_active + (439*k_1/216) - (8*k_2) + (3680*k_3/513) - (845*k_4/4104), capillary_, gas_);\n    //static\n    ArrayXXcd k_6 = h_ * RHS_UPPE(0 + (h_/2), A_w_active - (8*k_1/27) + (2*k_2) - (3544*k_3/2565) + (1859*k_4/4104) - (11*k_5/40), capillary_, gas_);\n\n    Y_4 = A_w_active + (25*k_1/216) + (1408*k_3/2565) + (2197*k_4/4104) - (k_5/5);\n    Y_5 = A_w_active + (16*k_1/135) + (6656*k_3/12825) + (28561*k_4/56430) - (9*k_5/50) + (2*k_6/55);\n\n    e = (Y_5 - Y_4).matrix().norm();\n}\n\n//------------------------------------------------------------------------------------------------//\n/*!\n    Evaluate RHS of UPPE\n*/\nArrayXXcd laser_pulse::RHS_UPPE(double dz_, ArrayXXcd temp_1, capillary_fibre& capillary_,\n                                keldysh_gas& gas_) {\n\n    // Apply linear propagator\n    for (int ii = 0; ii < rkr.n_m; ii++)\n        temp_1.col(ii) *= (std::complex<double>(0, -dz_) * (capillary_.gamma.col(ii) -\n                           (tw.w_active / physics.c).cast<std::complex<double> >())).exp();\n\n    // Backward spectral transform\n    //static\n    ArrayXXcd temp_2 = ArrayXXcd::Zero(tw.n_active, rkr.n_r);\n    temp_2.block(0, 0, tw.n_active, rkr.n_m) = temp_1;\n    for (int ii = 0; ii < tw.n_active; ii++)\n        temp_2.row(ii) = ht.backward(temp_2.row(ii));\n    //static\n    ArrayXXcd temp_3 = ArrayXXcd::Zero(tw.n_t, rkr.n_r);\n    temp_3.block(tw.w_active_min_index , 0, tw.n_active, rkr.n_r) = temp_2;\n    temp_3.block(tw.n_t - tw.n_active - tw.w_active_min_index + 1, 0,\n                 tw.n_active, rkr.n_r) = temp_2.conjugate().colwise().reverse();\n    for (int ii = 0; ii < rkr.n_r; ii++)\n        DftiComputeBackward(ft, temp_3.col(ii).data());\n\n    // Calculate medium response\n    //static\n    ArrayXXcd P_w_active_r = ArrayXXcd::Zero(tw.n_active, rkr.n_r);//tw.n_active, rkr.n_r);\n    //static\n    ArrayXXcd J_w_active_r = ArrayXXcd::Zero(tw.n_active, rkr.n_r);\n\n    for (int ii = 0; ii < rkr.n_r; ii++) {\n        P_w_active_r.col(ii) = gas_.nl_polarization(temp_3.col(ii).real());\n        //P_NL_t.col(ii) = gas_.nl_polarization(temp_3.col(ii).real());\n        J_w_active_r.col(ii) = gas_.current_density(temp_3.col(ii).real(), z_position);\n    }\n\n    for (int ii = 0; ii < tw.n_active; ii++) {\n        P_w_active_r.row(ii) = ht.forward(P_w_active_r.row(ii));\n        J_w_active_r.row(ii) = ht.forward(J_w_active_r.row(ii));\n    }\n    //static\n    ArrayXXcd P_w_active = P_w_active_r.block(0, 0, tw.n_active, rkr.n_m);\n    //static\n    ArrayXXcd J_w_active = J_w_active_r.block(0, 0, tw.n_active, rkr.n_m);\n\n    // Apply linear propagator\n    for (int ii = 0; ii < rkr.n_m; ii++) {\n        P_w_active.col(ii) *= (std::complex<double>(0, dz_) * (capillary_.gamma.col(ii) -\n                               (tw.w_active / physics.c).cast<std::complex<double> >())).exp();\n        J_w_active.col(ii) *= (std::complex<double>(0, dz_) * (capillary_.gamma.col(ii) -\n                               (tw.w_active / physics.c).cast<std::complex<double> >())).exp();\n    }\n\n    // Return RHS\n    //static\n    ArrayXXcd output = std::sqrt(physics.mu_0 / physics.eps_0) * ((P_w_active.colwise() *\n                       (std::complex<double>(0, 1) * tw.w_active)) - J_w_active);  // Should J_w_active be minus or plus?\n    //ArrayXXcd output = std::sqrt(physics.mu_0 / physics.eps_0) * ( - J_w_active);\n    //P_NL_w = P_w_active;\n\n    return(output);\n}\n",
			"file": "/home/sam/Project/XNLO/src/UPPE/laser_pulse.cpp",
			"file_size": 10857,
			"file_write_time": 131999125206028402,
			"settings":
			{
				"buffer_size": 10857,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "//\n//  laser_pulse.hpp\n//\n//  Originally created by Patrick Anderson.\n//  Modified by Samuel Senior on 10/03/2017.\n//  \"laser_pulse\" contains the active spectral amplitudes and governs their propagation over\n//  longitudinal step dz.\n//\n\n#ifndef __LASER_PULSE_HPP_INCLUDED__\n#define __LASER_PULSE_HPP_INCLUDED__\n\n#include <mkl.h>\n\n#include \"../../Eigen/Dense\"\n\n#include \"config_settings.hpp\"\n\n#include \"../capillary/capillary_fibre.hpp\"\n#include \"../DHT/DHT.hpp\"\n#include \"../gas/keldysh_gas.hpp\"\n#include \"../grid/grid_tw.hpp\"\n#include \"../grid/grid_rkr.hpp\"\n#include \"../physics/physics_textbook.hpp\"\n#include \"../maths/maths_textbook.hpp\"\n\nusing namespace Eigen;\n\n//------------------------------------------------------------------------------------------------//\n//  Class definition\n//------------------------------------------------------------------------------------------------//\n/*!\nOriginally created by Patrick Anderson.\nModified by Samuel Senior on 10/03/2017.\n\"laser_pulse\" contains the active spectral amplitudes and governs their propagation over\nlongitudinal step dz.\n*/\nclass laser_pulse {\n\n    double p_av;\n    double rep;\n    double fwhm;\n    double l_0;\n    double ceo;\n    double waist;\n\n    int read_in_laser_pulse;\n    double initial_position;\n\n    Config_Settings config;\n\n    // Data\n    physics_textbook physics;  /*!< Physical constants */\n    maths_textbook maths;      /*!< Mathematical constants and functions */\n    grid_tw tw;                /*!< Temperal grid */\n    grid_rkr rkr;              /*!< Radial grid */\n    DFTI_DESCRIPTOR_HANDLE ft; /*!< Fourier transform */\n    DHT ht;                    /*!< Hankel transform */\n    ArrayXXcd Y_4;             /*!< RKF 4 */\n    ArrayXXcd Y_5;             /*!< RKF 5 */\n    double e;                  /*!< Error in RKF45 solve */\n\n    double z_position;\n\n    // Functions\n    void RK_F_45(double dz_, capillary_fibre& capillary_, keldysh_gas& gas_);\n    ArrayXXcd RHS_UPPE(double dz_, ArrayXXcd A_w_active, capillary_fibre& capillary_,\n                       keldysh_gas& gas_);\n\npublic:\n    // Data\n    ArrayXXcd A_w_active; /*!< Spectral amplitudes */\n    ArrayXXcd P_NL_r_t;\n    ArrayXXcd P_NL_m_t;\n    ArrayXXcd P_NL_w;\n\n    ArrayXXd electron_density;\n    double atom_density_max;\n\n    double p_pk;\n    double E_pk;\n\n    // Functions\n    laser_pulse(double p_av_, double rep_, double fwhm_, double l_0_, double ceo_, double waist_,\n                grid_tw& tw_, grid_rkr& rkr_, DFTI_DESCRIPTOR_HANDLE& ft_, DHT& ht_, maths_textbook& maths_,\n                Config_Settings config,\n                int read_in_laser_pulse, double initial_position);\n    void propagate(double dz_, capillary_fibre& capillary_, keldysh_gas& gas_);\n};\n\n#endif\n",
			"file": "/home/sam/Project/XNLO/src/UPPE/laser_pulse.hpp",
			"file_size": 2725,
			"file_write_time": 131999126951364712,
			"settings":
			{
				"buffer_size": 2725,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/sam/Project/XNLO/src/gas/keldysh_gas.cpp",
			"settings":
			{
				"buffer_size": 7764,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 214.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"git diff",
				"git: diff current file inline"
			],
			[
				"package control i",
				"Package Control: Install Package"
			]
		],
		"width": 461.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/sam/Project/XNLO",
		"/home/sam/Project/XNLO/src",
		"/home/sam/Project/XNLO/src/atom",
		"/home/sam/Project/XNLO/src/capillary",
		"/home/sam/Project/XNLO/src/gas",
		"/home/sam/Project/XNLO/src/grid",
		"/home/sam/Project/XNLO/src/HHGP",
		"/home/sam/Project/XNLO/src/laser_pulse",
		"/home/sam/Project/XNLO/src/maths",
		"/home/sam/Project/XNLO/src/UPPE",
		"/home/sam/Project/XNLO/src/XNLO"
	],
	"file_history":
	[
		"/home/sam/Project/XNLO/src/HHGP/version.hpp",
		"/home/sam/Project/XNLO/src/UPPE/version.hpp",
		"/home/sam/Project/XNLO/src/XNLO/version.hpp",
		"/home/sam/Project/XNLO/src/XNLO/XNLO.cpp",
		"/home/sam/Project/XNLO/src/laser_pulse/laser_pulse.cpp",
		"/home/sam/Project/XNLO/src/XNLO/laser_pulse.cpp",
		"/home/sam/Project/XNLO/src/atom/Schrodinger_atom_1D.hpp",
		"/home/sam/Project/XNLO/src/HHGP/propagation.cpp",
		"/home/sam/Project/XNLO/src/HHGP/HH_source.cpp",
		"/home/sam/Downloads/boost_1_69_0/boost/atomic/atomic.hpp",
		"/home/sam/Downloads/boost_1_69_0/boost/atomic.hpp",
		"/home/sam/Downloads/boost_1_69_0/boost/align.hpp",
		"/home/sam/Project/XNLO/XNLO/src/config_settings.hpp",
		"/home/sam/Project/XNLO/XNLO/src/config_settings.cpp",
		"/home/sam/Project/XNLO/src/grid_rkr.hpp",
		"/home/sam/Project/XNLO/HHGP/src/HHGP.cpp",
		"/home/sam/Project/XNLO/HHGP/src/HHGP.hpp",
		"/home/sam/Project/XNLO/HHGP/src/main.cpp",
		"/home/sam/Project/XNLO/HHGP/src/propagation.hpp",
		"/home/sam/Project/XNLO/HHGP/src/_keldysh_gas.cpp",
		"/home/sam/Project/XNLO/HHGP/src/HH_source.cpp",
		"/home/sam/Project/XNLO/HHGP/src/config_settings.cpp",
		"/home/sam/Project/XNLO/HHGP/src/config_settings.hpp",
		"/home/sam/Project/XNLO/src/maths_textbook.cpp",
		"/home/sam/Project/XNLO/XNLO/src/XNLO.cpp",
		"/home/sam/Project/XNLO/src/IO.hpp",
		"/home/sam/Project/XNLO/src/IO.cpp",
		"/home/sam/Project/XNLO/XNLO/src/main.cpp",
		"/home/sam/Project/XNLO/XNLO/src/Schrodinger_atom_1D.hpp",
		"/home/sam/Project/XNLO/XNLO/src/Schrodinger_atom_1D.cpp",
		"/home/sam/Project/XNLO/HHGP/src/propagation.cpp",
		"/home/sam/Project/Prototyping/HHGP.py",
		"/home/sam/Project/Running/HHGP/testing.py",
		"/home/sam/Project/XNLO/HHGP/src/_grid_tw.cpp",
		"/home/sam/Project/XNLO/UPPE/src/laser_pulse.cpp",
		"/home/sam/Project/XNLO/src/keldysh_gas.cpp",
		"/home/sam/Project/XNLO/src/keldysh_gas.hpp",
		"/home/sam/Project/XNLO/XNLO/lib/XNLO.hpp",
		"/home/sam/Project/XNLO/UPPE/src/config_settings.hpp",
		"/home/sam/Project/XNLO/UPPE/src/config_settings.cpp",
		"/home/sam/Project/XNLO/UPPE/src/main.cpp",
		"/home/sam/Project/XNLO/UPPE/src/laser_pulse.hpp",
		"/home/sam/Project/Running/XNLO/XNLO_Figures.py",
		"/home/sam/Project/XNLO/HHGP/src/HH_source.hpp",
		"/home/sam/Project/XNLO/XNLO/src/grid_tw.hpp",
		"/home/sam/Project/XNLO/UPPE/src/capillary_fibre.hpp",
		"/home/sam/Project/XNLO/UPPE/src/capillary_fibre.cpp",
		"/home/sam/Project/XNLO/XNLO/src/grid_xkx.cpp",
		"/home/sam/Project/XNLO/XNLO/src/grid_xkx.hpp",
		"/home/sam/Project/XNLO/XNLO/src/grid_rkr.cpp",
		"/home/sam/Project/XNLO/XNLO/src/grid_rkr.hpp",
		"/home/sam/Project/XNLO/XNLO/src/DHT.cpp",
		"/home/sam/Project/XNLO/XNLO/src/DHT.hpp",
		"/home/sam/Project/XNLO/XNLO/src/grid_tw.cpp",
		"/home/sam/Project/XNLO/XNLO/src/IO.cpp",
		"/home/sam/Project/XNLO/XNLO/src/IO.hpp",
		"/home/sam/Project/XNLO/XNLO/src/laser_pulse.cpp",
		"/home/sam/Project/XNLO/XNLO/src/laser_pulse.hpp",
		"/home/sam/Project/XNLO/XNLO/src/maths_textbook.cpp",
		"/home/sam/Project/XNLO/XNLO/src/maths_textbook.hpp",
		"/home/sam/Project/XNLO/HHGP/src/DHT.hpp",
		"/home/sam/Project/XNLO/XNLO/src/XNLO.hpp",
		"/home/sam/Project/XNLO/UPPE/src/keldysh_gas.cpp",
		"/home/sam/Project/XNLO/HHGP/src/IO.cpp",
		"/home/sam/Project/XNLO/HHGP/src/IO.hpp",
		"/home/sam/Project/XNLO/HHGP/src/keldysh_gas.hpp",
		"/home/sam/Project/XNLO/HHGP/src/maths_textbook.hpp",
		"/home/sam/Project/XNLO/HHGP/src/maths_textbook.cpp",
		"/home/sam/Project/XNLO/HHGP/src/grid_tw.hpp",
		"/home/sam/Project/XNLO/HHGP/src/grid_tw.cpp",
		"/home/sam/Project/XNLO/HHGP/src/keldysh_gas.cpp",
		"/home/sam/Project/XNLO/HHGP/src/physics_textbook.cpp",
		"/home/sam/Project/XNLO/HHGP/src/physics_textbook.hpp",
		"/home/sam/Project/XNLO/HHGP/src/grid_rkr.cpp",
		"/home/sam/Project/XNLO/HHGP/src/grid_rkr.hpp",
		"/home/sam/Project/XNLO/HHGP/src/DHT.cpp",
		"/home/sam/Project/XNLO/UPPE/src/IO.hpp",
		"/home/sam/Project/Postprocessing/UPPEPostprocessing.py",
		"/home/sam/Project/Postprocessing/HHGPPostprocessing.py",
		"/home/sam/Project/Running/HHGP/HGGP_Figures.py",
		"/home/sam/Project/Results/Scripts/UPPE-XNLO_Figures.py",
		"/home/sam/Project/Running/UPPE/UPPE_Figures.py",
		"/home/sam/Project/Postprocessing/XNLOPostprocessing.py",
		"/home/sam/Project/XNLO/HHGP/HHGP.cpp",
		"/home/sam/Project/Results/Scripts/UPPE_Figures.py",
		"/home/sam/.cache/.fr-pnXhoo/datafittingc/source/dfdinterpusercells.c",
		"/home/sam/Project/XNLO/AtomicScatteringFactors/ar.nff",
		"/home/sam/.cache/.fr-Yh11v3/datafittingc/source/dfdfifthorderspline_interp.c",
		"/home/sam/.cache/.fr-7i79dx/datafittingc/source/dfdbinsearch.c",
		"/home/sam/.cache/.fr-G5QjnN/datafittingc/source/dfdcubicspline_interp.c",
		"/home/sam/Project/Running/UPPE-XNLO/XNLO_Figures.py",
		"/home/sam/Project/XNLO/HHGP/src/propagate.hpp",
		"/home/sam/Project/XNLO/HHGP/src/propagate.cpp",
		"/home/sam/Project/Results/Scripts/UPPEPostprocessing.py",
		"/home/sam/Project/Results/Scripts/XNLOPostprocessing.py",
		"/home/sam/Project/NineMonthReport/Report/Scripts/UPPEPostprocessing.py",
		"/home/sam/Project/NineMonthReport/Report/Scripts/XNLOPostprocessing.py",
		"/home/sam/Project/NineMonthReport/Report/Scripts/UPPE-XNLO_Figures.py",
		"/home/sam/Project/NineMonthReport/Report/Scripts/UPPE_Animaitons.py",
		"/home/sam/Project/NineMonthReport/Report/Scripts/XNLO_Figures.py",
		"/home/sam/Project/NineMonthReport/Report/Scripts/UPPE_Figures.py",
		"/home/sam/Project/XNLO/XNLO/src/physics_textbook.cpp",
		"/home/sam/Project/XNLO/XNLO/src/physics_textbook.hpp",
		"/home/sam/Project/XNLO/XNLO/src/text.cpp",
		"/home/sam/Project/XNLO/XNLO/src/text.hpp",
		"/home/sam/Project/XNLO/XNLO/XNLOPostprocessing.py",
		"/home/sam/Project/XNLO/UPPE/UPPEPostprocessing.py",
		"/home/sam/Project/XNLO/UPPE/animaitons.py",
		"/home/sam/Project/XNLO/XNLO/XNLO_Figures.py",
		"/home/sam/Project/XNLO/UPPE/UPPE_Figures.py",
		"/home/sam/Project/XNLO/UPPE/UPPE_Output.py",
		"/home/sam/Project/Results/UPPE/UPPE_Figures.py",
		"/home/sam/Project/XNLO/UPPE/src/IO.cpp",
		"/home/sam/Project/XNLO/UPPE/src/keldysh_gas.hpp",
		"/home/sam/Project/XNLO/XNLO/bin/800nm_ourLaser_3.sh",
		"/home/sam/Project/XNLO/XNLO/bin/qsub_mpi_800nm_ourLaser_3",
		"/home/sam/Project/XNLO/XNLO/bin/qsub_mpi_800nm_ourLaser_2",
		"/home/sam/Project/XNLO/XNLO/XNLO_Output.ipynb",
		"/home/sam/Project/XNLO/XNLO/bin/config.txt",
		"/home/sam/.cache/.fr-jcFNU1/datafittingc/source/dfdcubicsplineint2der.c",
		"/home/sam/Project/XNLO/UPPE/src/maths_textbook.hpp",
		"/home/sam/Project/XNLO/UPPE/src/maths_textbook.cpp",
		"/home/sam/Project/XNLO/UPPE/src/grid_tw.cpp",
		"/home/sam/Project/XNLO/UPPE/src/physics_textbook.cpp",
		"/home/sam/Project/XNLO/UPPE/src/dipole_moment.cpp",
		"/home/sam/Project/XNLO/UPPE/src/grid_rkr.cpp",
		"/home/sam/Project/XNLO/UPPE/src/DHT.cpp",
		"/home/sam/Project/XNLO/UPPE/src/DHT.hpp"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 101.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"ASF"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/home/sam/Project/XNLO/src/atom/Schrodinger_atom_1D.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10198,
						"regions":
						{
						},
						"selection":
						[
							[
								1126,
								1126
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/sam/Project/XNLO/src/UPPE/_capillary_fibre.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1712,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/sam/Project/XNLO/src/UPPE/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22267,
						"regions":
						{
						},
						"selection":
						[
							[
								7563,
								7563
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2904.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/sam/Project/XNLO/src/laser_pulse/laser_pulse.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20507,
						"regions":
						{
						},
						"selection":
						[
							[
								10291,
								10291
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/home/sam/Project/XNLO/src/XNLO/XNLO.hpp",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 306,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/home/sam/Project/XNLO/src/laser_pulse/laser_pulse.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3618,
						"regions":
						{
						},
						"selection":
						[
							[
								428,
								428
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/home/sam/Project/XNLO/src/XNLO/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7989,
						"regions":
						{
						},
						"selection":
						[
							[
								681,
								681
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				}
			]
		},
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 7,
					"file": "/home/sam/Project/XNLO/src/UPPE/laser_pulse.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10857,
						"regions":
						{
						},
						"selection":
						[
							[
								582,
								582
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/home/sam/Project/XNLO/src/UPPE/laser_pulse.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2725,
						"regions":
						{
						},
						"selection":
						[
							[
								1026,
								1026
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 51.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/home/sam/Project/XNLO/src/gas/keldysh_gas.cpp",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 7764,
						"regions":
						{
						},
						"selection":
						[
							[
								194,
								194
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.GitSavvy":
	{
		"height": 30.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "XNLO_root.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 235.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
